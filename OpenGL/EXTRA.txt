
	/*GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER); //specifying we want to make a vertex shader
	glShaderSource(vertexShader, 1, &vertexShaderSource, NULL); //ref value, using 1 string for whole shader, where source code is, ~
	glCompileShader(vertexShader);

	GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
	glCompileShader(fragmentShader);

	GLuint shaderProgram = glCreateProgram(); //wrap all the shaders into a shader program
	glAttachShader(shaderProgram, vertexShader);
	glAttachShader(shaderProgram, fragmentShader); //adding the shaders

	glLinkProgram(shaderProgram); //wrap up the program

	glDeleteShader(vertexShader);
	glDeleteShader(fragmentShader); //delete these because they are already inside the program*/

	/*GLuint VBO, VAO, EBO;

	glGenVertexArrays(1, &VAO); //amnt of objects, reference (Generatoe VAO with one obj.)
	glGenBuffers(1, &VBO); //amnt. of 3d objects and reference (Generate VBO with one obj.)
	glGenBuffers(1, &EBO); //Generate EBO (Element Buffer Object)
	// Make the VBO the current vertex buffer by binding it
	glBindBuffer(GL_ARRAY_BUFFER, VBO);

	glBindVertexArray(VAO); //make VAO the current vertex array by binding


	glBufferData(GL_ARRAY_BUFFER, sizeof(vert2d), vert2d, GL_STATIC_DRAW); //type of buffer, size of data in bytes, the data and the use. GL_Static (modified once, used many), Stream (mod. once, used a few times), Dynamic (modified multiple, used many)
	//VAO acts as pointers to VBO's and tells opengl on how to use them
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0); //position of vert attribute, values per vert, value type, if values are int, amnt of data between each vertex, offset (using void because our vertex is at the start of the array)
	glEnableVertexAttribArray(0); //enabling it, the var is the position of vert attribute

	glBindBuffer(GL_ARRAY_BUFFER, 0); //unbind VBO and VOA
	glBindVertexArray(0);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0); //unbind EBO after VAO becauase its stored in it*/